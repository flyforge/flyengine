//11567276230520348136|7
[PLATFORMS]
ALL

[PERMUTATIONS]


BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
FLIP_WINDING
FORWARD_PASS_WRITE_DEPTH
MSAA
SHADING_QUALITY
CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[MATERIALPARAMETER]


Texture2D NormalTexture @Default("");

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;
float MaskThreshold @Default(0);

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[VERTEXSHADER]

#define VSE_CONSTANTS 

#if !defined(USE_TEXCOORD0)
  #define USE_TEXCOORD0
#endif



#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#if 1
#if !defined(USE_NORMAL)
  #define USE_NORMAL
#endif
#if !defined(USE_TANGENT)
  #define USE_TANGENT
#endif

#endif

#if 0
  #define USE_OBJECT_POSITION_OFFSET
#endif

#if 0
  #define USE_WORLD_POSITION_OFFSET
#endif

#include <Shaders/Materials/MaterialVertexShader.h>
#include <Shaders/Common/VisualShaderUtil.h>

CONSTANT_BUFFER(plMaterialConstants, 1)
{
  FLOAT1(MaskThreshold);
  
  // Insert custom Visual Shader parameters here
  VSE_CONSTANTS
}

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}

#if defined(USE_OBJECT_POSITION_OFFSET)
float3 GetObjectPositionOffset(plPerInstanceData data)
{
  return ToFloat3(0);
}
#endif

#if defined(USE_WORLD_POSITION_OFFSET)
float3 GetWorldPositionOffset(plPerInstanceData data, float3 worldPosition)
{
  return ToFloat3(0);
}
#endif


[GEOMETRYSHADER]

#define VSE_CONSTANTS 

#if !defined(USE_TEXCOORD0)
  #define USE_TEXCOORD0
#endif



#include <Shaders/Materials/MaterialStereoGeometryShader.h>


[PIXELSHADER]

#define VSE_CONSTANTS 

#if !defined(USE_TEXCOORD0)
  #define USE_TEXCOORD0
#endif

#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_EMISSIVE
#define USE_MATERIAL_OCCLUSION
#define USE_TWO_SIDED_LIGHTING
#define USE_DECALS

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#if true
  #define USE_FOG
#endif

#if 1
#if !defined(USE_NORMAL)
  #define USE_NORMAL
#endif
#if !defined(USE_TANGENT)
  #define USE_TANGENT
#endif
#endif

#if 0
  #define USE_MATERIAL_REFRACTION
#endif

#if 0
  #define USE_MATERIAL_SUBSURFACE_COLOR
#endif


#include <Shaders/Materials/MaterialPixelShader.h>
#include <Shaders/Common/VisualShaderUtil.h>



Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;


  
CONSTANT_BUFFER(plMaterialConstants, 1)
{
  FLOAT1(MaskThreshold);
  
  // Insert custom Visual Shader parameters here
  VSE_CONSTANTS
}

float3 GetBaseColor()
{
  return ToColor3(GetInstanceData().Color);
}

float3 GetNormal()
{
#if defined(USE_TANGENT) || defined(USE_NORMAL)
  return TangentToWorldSpace(ToFloat3(DecodeNormalTexture(NormalTexture.Sample(NormalTexture_AutoSampler, ToFloat2(G.Input.TexCoord0)))));
#else
  return ToFloat3(DecodeNormalTexture(NormalTexture.Sample(NormalTexture_AutoSampler, ToFloat2(G.Input.TexCoord0))));
#endif
}

float GetMetallic()
{
  return saturate(ToFloat1(0));
}

float GetReflectance()
{
  return saturate(ToFloat1(0.5));
}

float GetRoughness()
{
  return saturate(ToFloat1(0.8));
}

float GetOpacity()
{
  #if BLEND_MODE == BLEND_MODE_MASKED
    return saturate(ToFloat1(1)) - MaskThreshold;
  #else
    return saturate(ToFloat1(1));
  #endif
}

float3 GetEmissiveColor()
{
  return ToColor3(GetInstanceData().Color);
}

float GetOcclusion()
{
  return saturate(ToFloat1(1));
}

#if defined USE_MATERIAL_REFRACTION
float4 GetRefractionColor()
{
  return ToColor4(float4(0, 0, 0, 1));
}
#endif

#if defined USE_MATERIAL_SUBSURFACE_COLOR
float3 GetSubsurfaceColor()
{
  return ToColor3(float3(0, 0, 0));
}
#endif


