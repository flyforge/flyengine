[PLATFORMS]
ALL
DEBUG

[PERMUTATIONS]
SHADING_QUALITY = SHADING_QUALITY_NORMAL

[COMPUTESHADER]

#include <Shaders/Common/Common.h>
#include <Shaders/Common/PostprocessCommon.h>
#include <Shaders/Pipeline/SSRConstants.h>

Texture2D<float2> TileMinMaxRoughnessHorizontal;
globallycoherent RWStructuredBuffer<plPostprocessTileStatistics> TileTracingStatistics;
RWStructuredBuffer<uint> TilesTracingEarlyexit;
RWStructuredBuffer<uint> TilesTracingCheap;
RWStructuredBuffer<uint> TilesTracingExpensive;
RWTexture2D<float2> Output;

static const float SSRRoughnessCheap = 0.35;
static const uint tile_tracing_replicate = sqr(SSR_TILESIZE / 2 / POSTPROCESS_BLOCKSIZE);


[numthreads(POSTPROCESS_BLOCKSIZE, POSTPROCESS_BLOCKSIZE, 1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
  const uint2 tile_upperleft = uint2(DTid.x, DTid.y * SSR_TILESIZE);
  float minRoughness = 1.0;
  float maxRoughness = 0.0;

  int2 dim;
  TileMinMaxRoughnessHorizontal.GetDimensions(dim.x, dim.y);

  [loop]
  for (uint i = 0; i < SSR_TILESIZE; ++i)
  {
    const uint2 pixel = uint2(tile_upperleft.x, tile_upperleft.y + i);
    if (pixel.x >= 0 && pixel.y >= 0 && pixel.x < dim.x && pixel.y < dim.y)
    {
      float2 minmax_roughness = TileMinMaxRoughnessHorizontal[pixel];
      minRoughness = min(minRoughness, minmax_roughness.r);
      maxRoughness = max(maxRoughness, minmax_roughness.g);
    }
  }

  const uint tile = (DTid.x & 0xFFFF) | ((DTid.y & 0xFFFF) << 16);

  uint prevCount;
  if (minRoughness < SSRRoughnessCheap)
  {
    InterlockedAdd(TileTracingStatistics[0].Dispatch_Expensive_ThreadGroupCountX, tile_tracing_replicate, prevCount);
    TilesTracingExpensive[prevCount / tile_tracing_replicate] = tile;
  }
  else if (maxRoughness > SSRRoughnessCheap && minRoughness < RoughnessCutoff)
  {
    InterlockedAdd(TileTracingStatistics[0].Dispatch_Cheap_ThreadGroupCountX, tile_tracing_replicate, prevCount);
    TilesTracingCheap[prevCount / tile_tracing_replicate] = tile;
  }
  else
  {
    InterlockedAdd(TileTracingStatistics[0].Dispatch_Earlyexit_ThreadGroupCountX, tile_tracing_replicate, prevCount);
    TilesTracingEarlyexit[prevCount / tile_tracing_replicate] = tile;
  }

  Output[DTid.xy] = float2(minRoughness, maxRoughness);
}